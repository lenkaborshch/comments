{"version":3,"sources":["api/api.ts","store/commentsReducer.ts","components/Preloader.tsx","utils/dateFormatter.ts","components/Comment.tsx","components/Comments.tsx","components/Modal.tsx","components/AddCommentForm.tsx","components/Pagination.tsx","App.tsx","store/store.ts","index.tsx"],"names":["baseURL","API","url","axios","get","then","res","data","page","name","text","post","SET_COMMENTS","SET_COMMENTS_BY_PAGE","TOGGLE_IS_FETCHING","initialState","comments","current_page","last_page","next_page_url","prev_page_url","isFetching","isFetchingByPage","setComments","type","setCommentsByPage","toggleIsFetching","byPage","getComments","dispatch","a","console","log","Preloader","style","display","justifyContent","margin","CircularProgress","dateFormatter","datee","date","Date","year","getFullYear","month","getMonth","dt","getDate","hours","getHours","minutes","getMinutes","useStyles","makeStyles","theme","card","background","padding","large","width","spacing","height","textAlign","wordBreak","fontSize","color","userName","Comment","classes","Paper","className","Grid","container","wrap","item","Avatar","alt","src","flexDirection","Comments","useDispatch","commentsData","useSelector","state","map","comment","created_at","Button","onClick","variant","createStyles","paper","position","backgroundColor","palette","border","boxShadow","shadows","top","left","transform","ModalWindow","open","setOpen","body","Modal","onClose","formSearch","containerForm","inputFormSearch","errorMessage","btn","AddCommentForm","useState","openModal","setOpenModal","formik","useFormik","initialValues","onSubmit","values","resetForm","validate","errors","handleSubmit","Box","TextField","label","placeholder","getFieldProps","onChange","handleChange","value","required","touched","disabled","root","marginTop","pagination","BasicPagination","Pagination","count","_e","getCommentsByPage","maxWidth","App","useEffect","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.316892bc.chunk.js","sourcesContent":["import axios from 'axios'\n\nexport const baseURL = 'https://jordan.ashton.fashion/api/goods/30/comments'\n\nexport const API = {\n    getCommentsByUrl: (url: string) => {\n        return axios.get<CommentsDataType>(url).then(res => res.data)\n    },\n    getCommentsByPage: (page: number) => {\n        return axios.get<CommentsDataType>(`${baseURL}?page=${page}`).then(res => res.data)\n    },\n    sendComment: (name: string, text: string) => {\n        return axios.post(baseURL, {name, text}).then(res => res)\n    }\n}\n\nexport type CommentsType = {\n    name: string\n    id: number\n    text: string\n    visible: number\n    product_id: number\n    created_at: string\n    updated_at: string\n}\n\nexport type CommentsDataType = {\n    data: CommentsType[]\n    current_page: number\n    first_page_url: string\n    from: number\n    last_page_url: string\n    last_page: number\n    links: []\n    next_page_url: string | null\n    path: string\n    per_page: number\n    prev_page_url: string | null\n    to: number\n    total: number\n}","import {ActionsTypes, AppStateType} from './store'\nimport {API, baseURL, CommentsDataType, CommentsType} from '../api/api'\nimport {ThunkAction, ThunkDispatch} from 'redux-thunk'\n\nconst SET_COMMENTS = 'SET_COMMENTS'\nconst SET_COMMENTS_BY_PAGE = 'SET_COMMENTS_BY_PAGE'\nconst TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\n\nconst initialState = {\n    comments: [] as Array<CommentsType>,\n    current_page: 1,\n    last_page: 0,\n    next_page_url: '' as string | null,\n    prev_page_url: '' as string | null,\n    isFetching: false,\n    isFetchingByPage: false\n}\n\nexport type CommentsReducerType = typeof initialState\n\n\nexport const commentsReducer = (state: CommentsReducerType = initialState, action: ActionsTypes): CommentsReducerType => {\n    switch (action.type) {\n        case SET_COMMENTS: {\n            return {\n                ...state,\n                comments: [...state.comments, ...action.data.data],\n                next_page_url: action.data.next_page_url,\n                last_page: action.data.last_page\n            }\n        }\n        case SET_COMMENTS_BY_PAGE: {\n            return {\n                ...state,\n                comments: action.data.data,\n                next_page_url: action.data.next_page_url,\n                last_page: action.data.last_page,\n                current_page: action.data.current_page\n            }\n        }\n        case TOGGLE_IS_FETCHING: {\n            return {...state, isFetching: action.isFetching, isFetchingByPage: action.byPage}\n        }\n        default: {\n            return state\n        }\n    }\n}\n\nexport const setComments = (data: CommentsDataType): SetCommentsActionType => ({type: SET_COMMENTS, data})\nexport const setCommentsByPage = (data: CommentsDataType): SetCommentsByTypeActionType => ({\n    type: SET_COMMENTS_BY_PAGE,\n    data\n})\nexport const toggleIsFetching = (isFetching: boolean, byPage: boolean): toggleIsFetchingActionType => ({\n    type: TOGGLE_IS_FETCHING,\n    isFetching,\n    byPage\n})\n\nexport const getComments = (url: string = baseURL): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\n        try {\n            dispatch(toggleIsFetching(true, false))\n            const data = await API.getCommentsByUrl(url)\n            dispatch(setComments(data))\n        } catch (e) {\n            console.log(e)\n        } finally {\n            dispatch(toggleIsFetching(false, false))\n        }\n    }\n}\n\nexport const getCommentsByPage = (page: number): ThunkType => {\n    return async (dispatch: ThunkDispatch<AppStateType, unknown, ActionsTypes>) => {\n        try {\n            dispatch(toggleIsFetching(false, true))\n            const data = await API.getCommentsByPage(page)\n            dispatch(setCommentsByPage(data))\n        } catch (e) {\n            console.log(e)\n        } finally {\n            dispatch(toggleIsFetching(false, false))\n        }\n    }\n}\n\ntype SetCommentsActionType = {\n    type: typeof SET_COMMENTS\n    data: CommentsDataType\n}\ntype SetCommentsByTypeActionType = {\n    type: typeof SET_COMMENTS_BY_PAGE\n    data: CommentsDataType\n}\n\ntype toggleIsFetchingActionType = {\n    type: typeof TOGGLE_IS_FETCHING\n    isFetching: boolean\n    byPage: boolean\n}\n\nexport type ThunkType = ThunkAction<void, AppStateType, unknown, ActionsTypes>","import CircularProgress from '@material-ui/core/CircularProgress'\nimport React from 'react'\n\nconst Preloader = () => {\n    return (\n        <div style={{display: 'flex', justifyContent: 'center', margin: '30px 0'}}><CircularProgress/></div>\n    )\n}\n\nexport default Preloader","//@ts-nocheck\nexport const dateFormatter = (datee: string) => {\n    let date = new Date(datee)\n    let year = date.getFullYear()\n    let month = date.getMonth() + 1\n    let dt = date.getDate()\n    let hours = date.getHours()\n    let minutes = date.getMinutes()\n\n    if (hours < 10) {\n        hours = '0' + hours\n    }\n    if (minutes < 10) {\n        minutes = '0' + minutes\n    }\n    if (dt < 10) {\n        dt = '0' + dt\n    }\n    if (month < 10) {\n        month = '0' + month\n    }\n\n    return `${hours}:${minutes} ${dt}.${month}.${year}`\n}","import React from 'react'\nimport {Avatar, Grid, Paper} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {dateFormatter} from '../utils/dateFormatter'\n\nconst useStyles = makeStyles((theme) => ({\n    card: {\n        background: '#fdf9f4',\n        padding: '40px 20px',\n        margin: '0 0 30px 0'\n    },\n    large: {\n        width: theme.spacing(7),\n        height: theme.spacing(7),\n    },\n    text: {\n        textAlign: 'left',\n        wordBreak: 'break-all',\n        fontSize: '18px',\n        margin: '5px 0'\n    },\n    date: {\n        textAlign: 'left',\n        color: 'gray'\n    },\n    userName: {\n        margin: 0,\n        textAlign: 'left'\n    }\n}))\n\ntype CommentPropsType = {\n    name: string\n    text: string\n    date: string\n}\n\nconst Comment: React.FC<CommentPropsType> = ({name, text, date}) => {\n    const classes = useStyles()\n    return (\n        <Paper className={classes.card}>\n            <Grid container wrap=\"nowrap\" spacing={2}>\n                <Grid item>\n                    <Avatar alt={name} src=\"https://picsum.photos/60\"\n                            className={classes.large}/>\n                </Grid>\n                <Grid>\n                    <h2 className={classes.userName}>{name}</h2>\n                    <p className={classes.text}>\n                        {text}\n                    </p>\n                    {date && <p className={classes.date}>\n                        {dateFormatter(date)}\n                    </p>}\n                </Grid>\n            </Grid>\n        </Paper>\n    )\n}\n\nexport default Comment\n","import React from 'react'\nimport {useDispatch, useSelector} from 'react-redux'\nimport {Button} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\n\nimport {CommentsReducerType, getComments} from '../store/commentsReducer'\nimport {AppStateType} from '../store/store'\nimport Preloader from './Preloader'\nimport Comment from './Comment'\n\n\nconst useStyles = makeStyles(() => ({\n    container: {\n        margin: '20px 0 0 0',\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '0 20px'\n    }\n}))\n\nconst Comments = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const commentsData = useSelector<AppStateType, CommentsReducerType>(state => state.commentsData)\n    const {isFetching, isFetchingByPage, comments, next_page_url} = commentsData\n    const showMoreComments = () => {\n        //@ts-ignore\n        dispatch(getComments(commentsData.next_page_url))\n    }\n\n    return (\n        <div className={classes.container}>\n            <div>\n                {isFetchingByPage\n                    ? <Preloader/>\n                    : comments.map(comment => <Comment key={`${comment.text}-${comment.name}-${comment.created_at}`}\n                                                       name={comment.name}\n                                                       text={comment.text} date={comment.created_at}/>)}\n            </div>\n\n            {!!next_page_url && (\n                <Button type=\"submit\" onClick={showMoreComments}\n                        variant=\"contained\" color=\"primary\">Show more</Button>\n            )}\n            {isFetching && <Preloader/>}\n        </div>\n    )\n}\n\nexport default Comments\n","import React from 'react'\nimport {makeStyles, Theme, createStyles} from '@material-ui/core/styles'\nimport Modal from '@material-ui/core/Modal'\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        paper: {\n            position: 'absolute',\n            width: 400,\n            backgroundColor: theme.palette.background.paper,\n            border: '2px solid #000',\n            boxShadow: theme.shadows[5],\n            padding: theme.spacing(2, 4, 3),\n            top: '50%',\n            left: '50%',\n            transform: 'translate(-50%, -50%)',\n            textAlign: 'center'\n        },\n    }),\n)\n\ntype ModalWindowPropsType = {\n    text: string\n    open: boolean\n    setOpen: (open: boolean) => void\n}\n\nconst ModalWindow: React.FC<ModalWindowPropsType> = ({text, open, setOpen}) => {\n    const classes = useStyles()\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const body = (\n        <div className={classes.paper}>\n            <h2>{text}</h2>\n        </div>\n    )\n\n    return (\n        <Modal\n            open={open}\n            onClose={handleClose}\n        >\n            {body}\n        </Modal>\n    )\n}\n\nexport default ModalWindow\n","import {useFormik} from 'formik'\nimport React, {useState} from 'react'\nimport {Box, Button, TextField} from '@material-ui/core'\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\n\nimport {API} from '../api/api'\nimport ModalWindow from './Modal'\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        formSearch: {\n            padding: '30px',\n            textAlign: 'center',\n        },\n        containerForm: {\n            display: 'flex',\n            flexDirection: 'column'\n        },\n        inputFormSearch: {\n            margin: '15px 0 0 0'\n        },\n        errorMessage: {\n            color: 'red',\n            textAlign: 'left',\n            fontSize: '14px',\n            padding: '5px 0'\n        },\n        btn: {\n            margin: '30px 0 0 0'\n        }\n    })\n)\n\nconst AddCommentForm = () => {\n    const classes = useStyles()\n    const [openModal, setOpenModal] = useState(false)\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            text: ''\n        },\n        onSubmit: async (values) => {\n            try {\n                await API.sendComment(values.name, values.text)\n                formik.resetForm()\n                setOpenModal(true)\n            } catch (e) {\n                console.log(e)\n            } finally {\n\n            }\n        },\n        validate: (values) => {\n            const errors: any = {}\n\n            if (!values.name) {\n                errors.name = 'Required field'\n            }\n            if (!values.text) {\n                errors.text = 'Required field'\n            }\n\n            return errors\n        }\n    })\n\n    return (\n        <>\n            <form onSubmit={formik.handleSubmit} className={classes.formSearch}>\n                <Box className={classes.containerForm}>\n                    <TextField label=\"Name\" placeholder=\"Name\" {...formik.getFieldProps('name')}\n                               onChange={formik.handleChange} value={formik.values.name}\n                               className={classes.inputFormSearch} required={true}/>\n                    {formik.errors.name && formik.touched.name &&\n                    <div className={classes.errorMessage}>{formik.errors.name}</div>}\n\n                    <TextField label=\"Text\" placeholder=\"Write your comment...\" {...formik.getFieldProps('text')}\n                               onChange={formik.handleChange} value={formik.values.text}\n                               className={classes.inputFormSearch} required={true}/>\n                    {formik.errors.text && formik.touched.text &&\n                    <div className={classes.errorMessage}>{formik.errors.text}</div>}\n\n                    <Button type=\"submit\" disabled={!formik.values.name || !formik.values.text}\n                            variant=\"contained\" color=\"primary\" className={classes.btn}>Add comment</Button>\n                </Box>\n            </form>\n            <ModalWindow text=\"Your comment has been sent\" open={openModal} setOpen={setOpenModal}/>\n        </>\n    )\n}\n\nexport default AddCommentForm","import React, {ChangeEvent, useEffect} from 'react'\nimport {makeStyles, createStyles} from '@material-ui/core/styles'\nimport Pagination from '@material-ui/lab/Pagination'\nimport {useDispatch, useSelector} from 'react-redux'\n\nimport {AppStateType} from '../store/store'\nimport {CommentsReducerType, getCommentsByPage} from '../store/commentsReducer'\n\nconst useStyles = makeStyles((theme) =>\n    createStyles({\n        root: {\n            '& > *': {\n                marginTop: theme.spacing(2),\n            },\n        },\n        pagination: {\n            '& > .MuiPagination-ul': {\n                justifyContent: 'center'\n            }\n        }\n    })\n)\n\nconst BasicPagination = () => {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n    const {last_page, current_page} = useSelector<AppStateType, CommentsReducerType>(state => state.commentsData)\n\n    const changePage = (_e: ChangeEvent<unknown>, page: number) => {\n        dispatch(getCommentsByPage(page))\n    }\n\n    return (\n        <div className={classes.root}>\n            {!!last_page &&\n            <Pagination className={classes.pagination} page={current_page} count={last_page}\n                        onChange={changePage}/>}\n        </div>\n    )\n}\n\nexport default BasicPagination","import React, {useEffect} from 'react'\nimport Comments from './components/Comments'\nimport {useDispatch} from 'react-redux'\nimport {getComments} from './store/commentsReducer'\nimport AddCommentForm from './components/AddCommentForm'\nimport {Box} from '@material-ui/core'\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\nimport BasicPagination from './components/Pagination'\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            maxWidth: '700px',\n            margin: ' 0 auto 100px auto'\n        }\n    })\n)\n\nfunction App() {\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getComments())\n    }, [dispatch])\n\n    return (\n        <Box className={classes.container}>\n            <AddCommentForm/>\n            <BasicPagination/>\n            <Comments/>\n        </Box>\n    )\n}\n\nexport default App\n","import {applyMiddleware, combineReducers, createStore} from 'redux'\nimport {\n    commentsReducer,\n    setComments,\n    toggleIsFetching,\n    setCommentsByPage\n} from './commentsReducer'\nimport thunkMiddleware from 'redux-thunk'\n\nexport type ActionsTypes =\n    ReturnType<typeof setComments>\n    | ReturnType<typeof setCommentsByPage>\n    | ReturnType<typeof toggleIsFetching>\n\n\nconst rootReducer = combineReducers({\n    commentsData: commentsReducer\n})\n\ntype RootReducerType = typeof rootReducer\nexport type AppStateType = ReturnType<RootReducerType>\n\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\n\n//@ts-ignore\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\n\nimport App from './App'\nimport { store } from './store/store'\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}